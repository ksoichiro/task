subprojects {
    sourceSets {
        // IntelliJ handles only one directory for test sources,
        // so 'integTest' classes are put into the test classes directory.
        integTest {
            java.srcDir file('src/integTest/java')
            resources.srcDir file('src/integTest/resources')
        }
    }

    task integTest(type: Test) {
        group = LifecycleBasePlugin.VERIFICATION_GROUP
        description = 'Runs the integration tests.'

        testClassesDir = sourceSets.integTest.output.classesDir
        classpath = sourceSets.integTest.runtimeClasspath
        binResultsDir = file("${buildDir}/integTest-results/binary/integTest")

        reports {
            html.destination = "${buildDir}/reports/integTest"
            junitXml.destination = "${buildDir}/integTest-results"
        }

        mustRunAfter test
    }

    check.dependsOn integTest

    dependencies {
        integTestCompile sourceSets.main.output
        integTestCompile sourceSets.test.output
        integTestCompile configurations.compile
        integTestCompile configurations.testCompile
        integTestRuntime configurations.runtime
        integTestRuntime configurations.testRuntime
    }

    gradle.projectsEvaluated {
        def unitTestTasks = []
        gradle.rootProject.allprojects { project ->
            unitTestTasks.addAll(project.tasks.findAll { it.name == 'test' })
        }
        unitTestTasks.each { unitTestTask ->
            project.integTest.mustRunAfter unitTestTask
        }
    }

    task integJacocoTestReport(type: JacocoReport) {
        dependsOn = ['integTest']
        reports {
            xml.enabled true
        }
        additionalSourceDirs = files(sourceSets.main.allSource.srcDirs)
        sourceDirectories = files(sourceSets.main.allSource.srcDirs)
        classDirectories = files(sourceSets.main.output)
        afterEvaluate {
            classDirectories = files(classDirectories.files.collect {
                fileTree(dir: it,
                    exclude: [
                        'com/ksoichiro/task/domain/Q*',
                    ])
            })
        }
        executionData = files(file("$buildDir/jacoco/integTest.exec"))
    }

    check.dependsOn 'integJacocoTestReport'

    task allJacocoTestReport(type: JacocoReport) {
        dependsOn = ['jacocoTestReport', 'integJacocoTestReport']
        reports {
            xml.enabled true
        }
        additionalSourceDirs = files(sourceSets.main.allSource.srcDirs)
        sourceDirectories = files(sourceSets.main.allSource.srcDirs)
        classDirectories = files(sourceSets.main.output)
        afterEvaluate {
            classDirectories = files(classDirectories.files.collect {
                fileTree(dir: it,
                    exclude: [
                        'com/ksoichiro/task/domain/Q*',
                    ])
            })
        }
        def executionDataList = []
        if (file("src/test/java").exists()) {
            executionDataList += file("$buildDir/jacoco/test.exec")
        }
        if (file("src/integTest/java").exists()) {
            executionDataList += file("$buildDir/jacoco/integTest.exec")
        }
        executionData executionDataList
    }

    check.dependsOn 'allJacocoTestReport'

    task allProjectJacocoTestReport(type: JacocoReport) {
        dependsOn = ['jacocoTestReport', 'integJacocoTestReport', 'allJacocoTestReport']
        reports {
            xml.enabled true
        }
        additionalSourceDirs = files(sourceSets.main.allSource.srcDirs)
        sourceDirectories = files(sourceSets.main.allSource.srcDirs)
        classDirectories = files(sourceSets.main.output)
        afterEvaluate {
            classDirectories = files(classDirectories.files.collect {
                fileTree(dir: it,
                    exclude: [
                        'com/ksoichiro/task/domain/Q*',
                    ])
            })
        }
        def executionDataList = []
        rootProject.subprojects.each { p ->
            if (p.file("src/test/java").exists()) {
                executionDataList += p.file("$p.buildDir/jacoco/test.exec")
            }
            if (p.file("src/integTest/java").exists()) {
                executionDataList += p.file("$p.buildDir/jacoco/integTest.exec")
            }
        }
        executionData executionDataList
    }

    check.dependsOn 'allProjectJacocoTestReport'

    gradle.projectsEvaluated {
        def jacocoTasks = []
        gradle.rootProject.allprojects { project ->
            jacocoTasks.addAll(project.tasks.findAll {
                it.name.toLowerCase().contains('jacocotestreport') && it.name != 'allProjectJacocoTestReport' })
        }
        jacocoTasks.each { testTask ->
            project.allProjectJacocoTestReport.mustRunAfter jacocoTasks
        }
    }

    idea {
        module {
            testSourceDirs += files(sourceSets.integTest.allSource.srcDirs)
        }
    }
}
