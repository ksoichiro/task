allprojects {
    apply plugin: 'jacoco'
    apply plugin: 'info.solidsoft.pitest'
}

subprojects {
    apply plugin: 'com.github.ksoichiro.console.reporter'
    apply plugin: 'checkstyle'

    checkstyle {
        toolVersion '7.4'
        configFile file("$rootDir/config/checkstyle/checkstyle.xml")
    }

    def testTypes = ['test', 'integTest']
    def jacocoTestReportTaskName = { testType -> "jacocoTestReport${testType.capitalize()}" }

    testTypes.each { testType ->
        def taskName = jacocoTestReportTaskName(testType)
        task "${taskName}"(type: JacocoReport) {
            dependsOn = [testType]
            reports {
                xml.enabled true
            }
            additionalSourceDirs = files(sourceSets.main.allSource.srcDirs)
            sourceDirectories = files(sourceSets.main.allSource.srcDirs)
            classDirectories = files(sourceSets.main.output)
            afterEvaluate {
                classDirectories = files(classDirectories.files.collect {
                    fileTree(dir: it,
                        exclude: [
                            'com/ksoichiro/task/domain/Q*',
                        ])
                })
            }
            executionData = files(file("$buildDir/jacoco/${testType}.exec"))
        }
        check.dependsOn taskName
    }

    task allJacocoTestReport(type: JacocoReport) {
        dependsOn = testTypes.collect { jacocoTestReportTaskName(it) }
        reports {
            xml.enabled true
        }
        additionalSourceDirs = files(sourceSets.main.allSource.srcDirs)
        sourceDirectories = files(sourceSets.main.allSource.srcDirs)
        classDirectories = files(sourceSets.main.output)
        afterEvaluate {
            classDirectories = files(classDirectories.files.collect {
                fileTree(dir: it,
                    exclude: [
                        'com/ksoichiro/task/domain/Q*',
                    ])
            })
        }
        def executionDataList = []
        testTypes.each { testType ->
            if (file("src/${testType}/java").exists()) {
                executionDataList += file("$buildDir/jacoco/${testType}.exec")
            }
        }
        executionData executionDataList
    }

    check.dependsOn 'allJacocoTestReport'

    task allProjectJacocoTestReport(type: JacocoReport) {
        dependsOn = ['allJacocoTestReport'] + testTypes.collect { jacocoTestReportTaskName(it) }
        reports {
            xml.enabled true
        }
        additionalSourceDirs = files(sourceSets.main.allSource.srcDirs)
        sourceDirectories = files(sourceSets.main.allSource.srcDirs)
        classDirectories = files(sourceSets.main.output)
        afterEvaluate {
            classDirectories = files(classDirectories.files.collect {
                fileTree(dir: it,
                    exclude: [
                        'com/ksoichiro/task/domain/Q*',
                    ])
            })
        }
        def executionDataList = []
        rootProject.subprojects.each { p ->
            testTypes.each { testType ->
                if (p.file("src/${testType}/java").exists()) {
                    executionDataList += p.file("$p.buildDir/jacoco/${testType}.exec")
                }
            }
        }
        executionData executionDataList
    }

    check.dependsOn 'allProjectJacocoTestReport'

    gradle.projectsEvaluated {
        def jacocoTasks = []
        gradle.rootProject.allprojects { project ->
            jacocoTasks.addAll(project.tasks.findAll {
                it.name.toLowerCase().contains('jacocotestreport') && it.name != 'allProjectJacocoTestReport' })
        }
        jacocoTasks.each { testTask ->
            project.allProjectJacocoTestReport.mustRunAfter jacocoTasks
        }
    }

    pitest {
        targetClasses = ['com.ksoichiro.task.*']
    }
    //check.dependsOn 'pitest'

    consoleReporter {
        jacoco {
            coverageTaskName 'allProjectJacocoTestReport'
            reportFile project.file("${buildDir}/reports/jacoco/allProjectJacocoTestReport/allProjectJacocoTestReport.xml")
        }
    }
}
