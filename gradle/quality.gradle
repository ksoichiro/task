allprojects {
    apply plugin: 'jacoco'
    apply plugin: 'info.solidsoft.pitest'
}

subprojects {
    apply plugin: 'com.github.ksoichiro.console.reporter'
    apply plugin: 'checkstyle'

    checkstyle {
        toolVersion '7.4'
        configFile file("$rootDir/config/checkstyle/checkstyle.xml")
    }

    def testTypes = ['test', 'integTest']
    def jacocoTestReportTaskName = { testType -> "jacocoTestReport${testType.capitalize()}" }

    testTypes.each { testType ->
        def taskName = jacocoTestReportTaskName(testType)
        task "${taskName}"(type: JacocoReport) {
            dependsOn = [testType]
            reports {
                xml.enabled true
            }
            additionalSourceDirs = files(sourceSets.main.allSource.srcDirs)
            sourceDirectories = files(sourceSets.main.allSource.srcDirs)
            classDirectories = files(sourceSets.main.output)
            afterEvaluate {
                classDirectories = files(classDirectories.files.collect {
                    fileTree(dir: it,
                        exclude: [
                            'com/ksoichiro/task/domain/Q*',
                        ])
                })
            }
            executionData = files(file("$buildDir/jacoco/${testType}.exec"))
        }
        check.dependsOn taskName
    }

    task allJacocoTestReport(type: JacocoReport) {
        dependsOn = testTypes.collect { jacocoTestReportTaskName(it) }
        reports {
            xml.enabled true
        }
        additionalSourceDirs = files(sourceSets.main.allSource.srcDirs)
        sourceDirectories = files(sourceSets.main.allSource.srcDirs)
        classDirectories = files(sourceSets.main.output)
        afterEvaluate {
            classDirectories = files(classDirectories.files.collect {
                fileTree(dir: it,
                    exclude: [
                        'com/ksoichiro/task/domain/Q*',
                    ])
            })
        }
        def executionDataList = []
        testTypes.each { testType ->
            if (project.file("src/${testType}/java").exists()) {
                executionDataList += file("$project.buildDir/jacoco/${testType}.exec")
            }
        }
        executionData executionDataList
    }

    check.dependsOn 'allJacocoTestReport'

    task allProjectJacocoTestReport(type: JacocoReport) {
        dependsOn = ['allJacocoTestReport'] + testTypes.collect { jacocoTestReportTaskName(it) }
        reports {
            xml.enabled true
        }
        additionalSourceDirs = files(sourceSets.main.allSource.srcDirs)
        sourceDirectories = files(sourceSets.main.allSource.srcDirs)
        classDirectories = files(sourceSets.main.output)
        afterEvaluate {
            classDirectories = files(classDirectories.files.collect {
                fileTree(dir: it,
                    exclude: [
                        'com/ksoichiro/task/domain/Q*',
                    ])
            })
        }
        gradle.projectsEvaluated {
            def executionDataList = []
            rootProject.subprojects.each { p ->
                if (p == project || getAllDependentProjects(p).any { it == project }) {
                    testTypes.each { testType ->
                        if (p.file("src/${testType}/java").exists()) {
                            executionDataList += p.file("$p.buildDir/jacoco/${testType}.exec")
                        }
                    }
                }
            }
            executionData executionDataList
        }
    }

    check.dependsOn 'allProjectJacocoTestReport'

    gradle.projectsEvaluated {
        def jacocoTasks = []
        gradle.rootProject.allprojects { project ->
            jacocoTasks.addAll(project.tasks.findAll {
                it.name.toLowerCase().contains('jacocotestreport') && it.name != 'allProjectJacocoTestReport' })
        }
        jacocoTasks.each { testTask ->
            project.allProjectJacocoTestReport.mustRunAfter jacocoTasks
        }
    }

    pitest {
        targetClasses = ['com.ksoichiro.task.*']
    }
    //check.dependsOn 'pitest'

    consoleReporter {
        jacoco {
            coverageTaskName 'allProjectJacocoTestReport'
            reportFile project.file("${buildDir}/reports/jacoco/allProjectJacocoTestReport/allProjectJacocoTestReport.xml")
        }
    }
}

task summary {
    def dependentTasks = []
    rootProject.subprojects.each { p ->
        dependentTasks.addAll(p.tasks.findAll { it.name == 'allProjectJacocoTestReport' })
    }
    onlyIf {
        0 < dependentTasks.size()
    }
    if (0 < dependentTasks.size()) {
        dependsOn dependentTasks
    }
    def inputFiles = []
    rootProject.subprojects.each { p ->
        inputFiles += p.file("${p.buildDir}/reports/jacoco/allJacocoTestReport/allJacocoTestReport.xml")
        inputFiles += p.file("${p.buildDir}/reports/jacoco/allProjectJacocoTestReport/allProjectJacocoTestReport.xml")
    }
    inputs.files inputFiles
    def reportFile = project.file("${buildDir}/report/summary/index.html")
    outputs.file reportFile
    outputs.upToDateWhen { false }
    doLast {
        def reportDir = reportFile.parentFile
        if (!reportDir.exists()) {
            project.mkdir(reportDir)
        }
        reportFile.text = """\
            |<html>
            |<head>
            |<title>Summary</title>
            |<style>
            |body {
            |  font-size: 14px;
            |  font-family: "Helvetica Neue"
            |}
            |h3 {
            |  font-size: 24px;
            |}
            |table {
            |  border-collapse: collapse;
            |}
            |td,th {
            |  border: 1px solid #ddd;
            |  padding: 4px;
            |}
            |th {
            |  font-weight: bold;
            |  border-bottom-width: 2px;
            |}
            |.right {
            |  text-align: right;
            |}
            |.bad {
            |  color: #d9534f;
            |}
            |.warn {
            |  color: #f0ad4e;
            |}
            |.fine {
            |  color: #5cb85c;
            |}
            |</style>
            |</head>
            |<body>
            |<h3>Coverage</h3>
            |<table>
            |<tr>
            |  <th>Project</th>
            |  <th>Single project[%]</th>
            |  <th>All projects[%]</th>
            |</tr>
            |""".stripMargin().stripIndent()
        rootProject.subprojects.each { p ->
            def coverage = { file ->
                def rootNode = new XmlParser(false, false).parseText(file.text.replaceAll("<!DOCTYPE[^>]*>", ""))
                def cov = 0.0f
                rootNode.counter.each { counter ->
                    try {
                        if ('INSTRUCTION' == counter.@type) {
                            def covered = Integer.valueOf(counter.@covered as String)
                            def missed = Integer.valueOf(counter.@missed as String)
                            cov = (100.0 * covered / (missed + covered)) as float
                        }
                    } catch (ignore) {
                    }
                }
                cov
            }
            def covSingle = coverage(p.file("${p.buildDir}/reports/jacoco/allJacocoTestReport/allJacocoTestReport.xml"))
            def covAll = coverage(p.file("${p.buildDir}/reports/jacoco/allProjectJacocoTestReport/allProjectJacocoTestReport.xml"))
            def covClasses = { cov ->
                if (80 <= cov) {
                    return "fine"
                } else if (60 <= cov) {
                    return "warn"
                } else {
                    return "bad"
                }
            }
            def covSingleClasses = covClasses(covSingle)
            def covAllClasses = covClasses(covAll)
            def singleHtmlReportFile = p.file("${p.buildDir}/reports/jacoco/allJacocoTestReport/html/index.html")
            def allHtmlReportFile = p.file("${p.buildDir}/reports/jacoco/allProjectJacocoTestReport/html/index.html")
            reportFile.text += """\
                |<tr>
                |  <td>${p.name}</td>
                |  <td class="right"><a href="file://${singleHtmlReportFile.canonicalPath}" class="${covSingleClasses}">${sprintf('%3.2f', covSingle.round(2))}</a></td>
                |  <td class="right"><a href="file://${allHtmlReportFile.canonicalPath}" class="${covAllClasses}">${sprintf('%3.2f', covAll.round(2))}</a></td>
                |</tr>
                |""".stripMargin().stripIndent()
        }
        reportFile.text += """\
            |</table>
            |</div>
            |</body>
            |</html>
            |""".stripMargin().stripIndent()
        println "Summary:"
        println "${reportFile.canonicalPath}"
    }
}
check.dependsOn 'summary'

// https://discuss.gradle.org/t/getting-all-project-dependencies/6540/2
def getAllDependentProjects(project) {
    def projectDependencies = project.configurations.runtime.getAllDependencies().withType(ProjectDependency)
    def dependentProjects = projectDependencies*.dependencyProject
    if (dependentProjects.size > 0) {
        dependentProjects.each { dependentProjects += getAllDependentProjects(it) }
    }
    return dependentProjects.unique()
}
