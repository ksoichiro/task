import org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder

buildscript {
    repositories {
        jcenter()
    }
    dependencies {
        classpath "org.springframework.boot:spring-boot-gradle-plugin:1.3.2.RELEASE"
        classpath "org.springframework.boot:spring-boot-starter-security:1.3.2.RELEASE"
        classpath "com.github.ksoichiro:gradle-build-info-plugin:0.2.0"
        classpath "info.solidsoft.gradle.pitest:gradle-pitest-plugin:1.1.10"
        classpath 'net.rdrei.android.buildtimetracker:gradle-plugin:0.9.0'
    }
}

plugins {
    id 'com.github.ksoichiro.web.resource' version '1.7.0'
    id 'com.github.ksoichiro.console.reporter' version '0.4.0'
    id 'com.github.kt3k.coveralls' version '2.7.0'
}

ext.vJavaLang = '1.8'

apply plugin: 'build-time-tracker'

buildtimetracker {
    reporters {
        summary {
            ordered true
            threshold 50
            barstyle 'unicode'
        }
    }
}

allprojects {
    apply plugin: 'java'
    apply plugin: 'idea'
    apply plugin: 'spring-boot'
    apply plugin: 'jacoco'
    apply plugin: 'com.github.ksoichiro.build.info'
    apply plugin: 'info.solidsoft.pitest'

    repositories {
        jcenter()
    }

    idea {
        module {
            inheritOutputDirs = false
            outputDir = file("${buildDir}/classes/main")
        }
    }
}

subprojects {
    ext['mariadb.version'] = '1.3.2'

    dependencies {
        compile 'org.projectlombok:lombok:1.16.2'
        compile "org.springframework.boot:spring-boot-starter-web"
        compile "org.springframework.boot:spring-boot-starter-thymeleaf"
        compile "org.springframework.boot:spring-boot-starter-data-jpa"
        compile "org.springframework.boot:spring-boot-starter-security"
        compile "org.springframework.boot:spring-boot-starter-actuator"
        compile "org.springframework.boot:spring-boot-starter-cache"
        compile "org.thymeleaf.extras:thymeleaf-extras-springsecurity4"
        compile "org.thymeleaf.extras:thymeleaf-extras-conditionalcomments"
        compile "com.h2database:h2"
        compile "org.mariadb.jdbc:mariadb-java-client"

        testCompile "org.springframework.boot:spring-boot-starter-test"
        testCompile "org.springframework.security:spring-security-test"
    }

    jar {
        baseName = rootProject.name + project.name.capitalize()
        version = '0.0.1-SNAPSHOT'
    }

    buildInfo {
        gitPropertiesEnabled true
    }

    bootRun {
        addResources true
        if (System.properties.containsKey('spring.profiles.active')) {
            systemProperty "spring.profiles.active", System.properties['spring.profiles.active']
        }
    }

    jacocoTestReport {
        reports {
            xml.enabled true
        }
        afterEvaluate {
            classDirectories = files(classDirectories.files.collect {
                fileTree(dir: it,
                    exclude: [
                        'com/ksoichiro/task/domain/Q*',
                    ])
            })
        }
    }
    check.dependsOn 'jacocoTestReport'

    pitest {
        targetClasses = ['com.ksoichiro.task.*']
    }
    //check.dependsOn 'pitest'

    consoleReporter {
        jacoco {
            reportFile project.file("${buildDir}/reports/jacoco/allJacocoTestReport/allJacocoTestReport.xml")
        }
    }
}
apply from: 'gradle/integTest.gradle'

idea {
    project {
        languageLevel = vJavaLang
        ipr {
            withXml { provider ->
                def mapping = provider.node.component.find { it.@name == 'VcsDirectoryMappings' }.mapping
                mapping.@vcs = 'Git'
                mapping.@directory = '$PROJECT_DIR$'
            }
        }
    }
}

// e.g. ./gradlew encodePassword -Pargs="test"
task encodePassword << {
    BCryptPasswordEncoder encoder = new BCryptPasswordEncoder()
    String username = 'test'
    if (project.hasProperty('args')) {
        username = project.args.split('\\s+')[0]
    }
    println "Encoded password for user ${username}:"
    println encoder.encode(username)
}

task stage
stage.dependsOn 'assemble'
