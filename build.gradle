import org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder

buildscript {
    repositories {
        jcenter()
    }
    dependencies {
        classpath "org.springframework.boot:spring-boot-gradle-plugin:1.3.2.RELEASE"
        classpath "org.springframework.boot:spring-boot-starter-security:1.3.2.RELEASE"
        classpath "com.github.ksoichiro:gradle-build-info-plugin:0.2.0"
        classpath "info.solidsoft.gradle.pitest:gradle-pitest-plugin:1.1.10"
    }
}

plugins {
    id 'com.github.ksoichiro.web.resource' version '1.7.0'
    id 'com.github.ksoichiro.console.reporter' version '0.4.0'
    id 'com.github.kt3k.coveralls' version '2.7.0'
}

ext.vJavaLang = '1.8'

allprojects {
    apply plugin: 'java'
    apply plugin: 'idea'
    apply plugin: 'spring-boot'
    apply plugin: 'jacoco'
    apply plugin: 'com.github.ksoichiro.build.info'
    apply plugin: 'info.solidsoft.pitest'

    repositories {
        jcenter()
    }

    idea {
        module {
            inheritOutputDirs = false
            outputDir = file("${buildDir}/classes/main")
        }
    }
}

subprojects {
    ext['mariadb.version'] = '1.3.2'

    sourceSets {
        integTest {
            java.srcDir file('src/integTest/java')
            resources.srcDir file('src/integTest/resources')
        }
    }

    task integTest(type: Test) {
        testClassesDir = sourceSets.integTest.output.classesDir
        classpath = sourceSets.integTest.runtimeClasspath
        mustRunAfter test
    }

    dependencies {
        compile 'org.projectlombok:lombok:1.16.2'
        compile "org.springframework.boot:spring-boot-starter-web"
        compile "org.springframework.boot:spring-boot-starter-thymeleaf"
        compile "org.springframework.boot:spring-boot-starter-data-jpa"
        compile "org.springframework.boot:spring-boot-starter-security"
        compile "org.springframework.boot:spring-boot-starter-actuator"
        compile "org.springframework.boot:spring-boot-starter-cache"
        compile "org.thymeleaf.extras:thymeleaf-extras-springsecurity4"
        compile "org.thymeleaf.extras:thymeleaf-extras-conditionalcomments"
        compile "com.h2database:h2"
        compile "org.mariadb.jdbc:mariadb-java-client"

        testCompile "org.springframework.boot:spring-boot-starter-test"
        testCompile "org.springframework.security:spring-security-test"

        integTestCompile sourceSets.main.output
        integTestCompile sourceSets.test.output
        integTestCompile configurations.compile
        integTestCompile configurations.testCompile
        integTestRuntime configurations.runtime
        integTestRuntime configurations.testRuntime
    }

    jar {
        baseName = rootProject.name + project.name.capitalize()
        version = '0.0.1-SNAPSHOT'
    }

    gradle.projectsEvaluated {
        def unitTestTasks = []
        gradle.rootProject.allprojects { project ->
            unitTestTasks.addAll(project.tasks.findAll { it.name == 'test' })
        }
        unitTestTasks.each { unitTestTask ->
            project.integTest.mustRunAfter unitTestTask
        }
    }

    check.dependsOn integTest

    buildInfo {
        gitPropertiesEnabled true
    }

    bootRun {
        addResources true
        if (System.properties.containsKey('spring.profiles.active')) {
            systemProperty "spring.profiles.active", System.properties['spring.profiles.active']
        }
    }

    jacocoTestReport {
        reports {
            xml.enabled true
        }
        afterEvaluate {
            classDirectories = files(classDirectories.files.collect {
                fileTree(dir: it,
                    exclude: [
                        'com/ksoichiro/task/domain/Q*',
                    ])
            })
        }
    }
    check.dependsOn 'jacocoTestReport'

    task integJacocoTestReport(type: JacocoReport) {
        dependsOn = ['integTest']
        reports {
            xml.enabled true
        }
        additionalSourceDirs = files(sourceSets.main.allSource.srcDirs)
        sourceDirectories = files(sourceSets.main.allSource.srcDirs)
        classDirectories = files(sourceSets.main.output)
        afterEvaluate {
            classDirectories = files(classDirectories.files.collect {
                fileTree(dir: it,
                    exclude: [
                        'com/ksoichiro/task/domain/Q*',
                    ])
            })
        }
        executionData = files(file("$buildDir/jacoco/integTest.exec"))
    }

    check.dependsOn 'integJacocoTestReport'

    task allJacocoTestReport(type: JacocoReport) {
        dependsOn = ['jacocoTestReport', 'integJacocoTestReport']
        reports {
            xml.enabled true
        }
        additionalSourceDirs = files(sourceSets.main.allSource.srcDirs)
        sourceDirectories = files(sourceSets.main.allSource.srcDirs)
        classDirectories = files(sourceSets.main.output)
        afterEvaluate {
            classDirectories = files(classDirectories.files.collect {
                fileTree(dir: it,
                    exclude: [
                        'com/ksoichiro/task/domain/Q*',
                    ])
            })
        }
        executionData = files(file("$buildDir/jacoco/test.exec"), file("$buildDir/jacoco/integTest.exec"))
    }

    check.dependsOn 'allJacocoTestReport'

    pitest {
        targetClasses = ['com.ksoichiro.task.*']
    }
    //check.dependsOn 'pitest'

    consoleReporter {
        jacoco {
            reportFile project.file("${buildDir}/reports/jacoco/allJacocoTestReport/allJacocoTestReport.xml")
        }
    }
}

idea {
    project {
        languageLevel = vJavaLang
        ipr {
            withXml { provider ->
                def mapping = provider.node.component.find { it.@name == 'VcsDirectoryMappings' }.mapping
                mapping.@vcs = 'Git'
                mapping.@directory = '$PROJECT_DIR$'
            }
        }
    }
}

// e.g. ./gradlew encodePassword -Pargs="test"
task encodePassword << {
    BCryptPasswordEncoder encoder = new BCryptPasswordEncoder()
    String username = 'test'
    if (project.hasProperty('args')) {
        username = project.args.split('\\s+')[0]
    }
    println "Encoded password for user ${username}:"
    println encoder.encode(username)
}

task stage
stage.dependsOn 'assemble'
