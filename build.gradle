import org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder

buildscript {
    ext.querydslVersion = '3.6.7'
    repositories {
        jcenter()
    }
    dependencies {
        classpath "org.springframework.boot:spring-boot-gradle-plugin:1.3.2.RELEASE"
        classpath "org.springframework.boot:spring-boot-starter-security:1.3.2.RELEASE"
        classpath "com.github.ksoichiro:gradle-build-info-plugin:0.1.5"
    }
}

plugins {
    id 'com.github.ksoichiro.web.resource' version '1.7.0'
    id 'com.github.ksoichiro.console.reporter' version '0.4.0'
    id 'com.github.kt3k.coveralls' version '2.7.0'
}

def vJavaLang = '1.8'

apply plugin: 'java'
apply plugin: 'idea'
apply plugin: 'spring-boot'
apply plugin: 'jacoco'
apply plugin: 'com.github.ksoichiro.web.resource'
apply plugin: 'com.github.ksoichiro.build.info'

repositories {
    jcenter()
}

ext['mariadb.version'] = '1.3.2'

configurations {
    provided
}

dependencies {
    provided "com.mysema.querydsl:querydsl-apt:${querydslVersion}"
    compile 'org.projectlombok:lombok:1.16.2'
    compile "org.springframework.boot:spring-boot-starter-web"
    compile "org.springframework.boot:spring-boot-starter-thymeleaf"
    compile "org.springframework.boot:spring-boot-starter-data-jpa"
    compile "org.springframework.boot:spring-boot-starter-security"
    compile "org.springframework.boot:spring-boot-starter-actuator"
    compile "org.thymeleaf.extras:thymeleaf-extras-springsecurity4"
    compile "org.thymeleaf.extras:thymeleaf-extras-conditionalcomments"
    compile "com.h2database:h2"
    compile "org.mariadb.jdbc:mariadb-java-client"
    compile "com.mysema.querydsl:querydsl-jpa:${querydslVersion}"
    testCompile "org.springframework.boot:spring-boot-starter-test"
}

jar {
    baseName = 'task'
    version = '0.0.1-SNAPSHOT'
}

webResource {
    base {
        dest = 'src/main/resources/static'
    }
    bower {
        dependencies {
            install name: 'jquery', version: '1.11.2', filter: ["dist/*.min.*"]
            install name: 'bootstrap', version: '3.3.4', filter: ["dist/js/*.min.js", "dist/fonts/*"]
            install name: 'components-font-awesome', version: '4.7.0', filter: ["fonts/*"]
            install name: 'respond-minmax', version: '1.4.2', filter: ["dest/*.min.js"]
            install name: 'html5shiv', version: '3.7.2', filter: ["dist/*.min.js"]
            install name: 'chosen', version: '1.6.2', filter: ["*.js"]
            install name: 'bootstrap-chosen', version: '1.0.1', filter: ["*.png"]
            install name: 'js-cookie', version: '2.1.3'
        }
    }
}

buildInfo {
    gitPropertiesEnabled true
}

bootRun {
    addResources true
    if (System.properties.containsKey('spring.profiles.active')) {
        systemProperty "spring.profiles.active", System.properties['spring.profiles.active']
    }
}

test {
    jacoco {
        excludes = ['com.ksoichiro.task.domain.Q*']
    }
}

jacocoTestReport {
    reports {
        xml.enabled true
    }
}

check.dependsOn 'jacocoTestReport'

def querydslDir = file('src/main/generated')

task generateQuerydsl(type: JavaCompile) {
    source = sourceSets.main.java
    classpath = configurations.compile + configurations.provided
    destinationDir = querydslDir
    options.compilerArgs += [
        '-proc:only',
        '-processor', 'com.mysema.query.apt.jpa.JPAAnnotationProcessor'
    ]
}

compileJava {
    dependsOn generateQuerydsl
    sourceSets.main.java.srcDir querydslDir
}

clean {
    delete querydslDir
}

task processSql << {
    def sqlFile = file("src/main/sql/data.sql")
    file("src/main/resources/data-h2.sql").withWriter { writer ->
        file("src/main/sql/data.sql").eachLine { line ->
            if (!line.startsWith("set ")) {
                writer.println(line)
            }
        }
    }
    copy {
        from sqlFile
        into "src/main/resources"
        rename "data.sql", "data-mariadb.sql"
    }
}
processResources.dependsOn 'processSql'

idea {
    module {
        inheritOutputDirs = false
        outputDir = file("${buildDir}/classes/main")

        excludeDirs += [
                file('src/main/resources/static/css'),
                file('src/main/resources/static/js'),
                file('src/main/resources/static/lib'),
        ]
    }
    project {
        languageLevel = vJavaLang
        ipr {
            withXml { provider ->
                def mapping = provider.node.component.find { it.@name == 'VcsDirectoryMappings' }.mapping
                mapping.@vcs = 'Git'
                mapping.@directory = '$PROJECT_DIR$'
            }
        }
    }
}

// e.g. ./gradlew encodePassword -Pargs="test"
task encodePassword << {
    BCryptPasswordEncoder encoder = new BCryptPasswordEncoder()
    String username = 'test'
    if (project.hasProperty('args')) {
        username = project.args.split('\\s+')[0]
    }
    println "Encoded password for user ${username}:"
    println encoder.encode(username)
}

compileJava.dependsOn 'webResourceCompile'
task stage
stage.dependsOn 'assemble'
